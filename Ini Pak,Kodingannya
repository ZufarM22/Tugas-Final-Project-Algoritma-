#include <iostream>
#include <vector>
#include <string>
#include <map>

using namespace std;

class MenuItem {
public:
    string name;
    double price;
    int stock;

    MenuItem(string n, double p, int s) : name(n), price(p), stock(s) {}

    void updateStock(int newStock) {
        stock = newStock;
    }

    void reduceStock(int quantity) {
        if (stock >= quantity) {
            stock -= quantity;
        }
        else {
            cout << "Not enough stock for " << name << endl;
        }
    }

    bool isAvailable(int quantity) {
        return stock >= quantity;
    }
};

class SchoolFoodService {
private:
    vector<MenuItem> menu;
    map<string, int> dailySales;
    map<string, int> menuFavorites;
    string breakTime;

public:
    // Service Planning (Owner)
    void setBreakTime(string time) {
        breakTime = time;
        cout << "Break time set to: " << breakTime << endl;
    }

    void setMenuPrice(string itemName, double price) {
        for (auto& item : menu) {
            if (item.name == itemName) {
                item.price = price;
                cout << "Price for " << itemName << " updated to: " << price << endl;
            }
        }
    }

    // Business Analysis (Owner)
    void recordSale(string itemName, int quantity) {
        if (dailySales.find(itemName) == dailySales.end()) {
            dailySales[itemName] = 0;
        }
        dailySales[itemName] += quantity;
    }

    void displaySales() {
        cout << "Total Sales: " << endl;
        for (auto& sale : dailySales) {
            cout << sale.first << ": " << sale.second << " sold" << endl;
        }
    }

    void displayFavoriteMenu() {
        cout << "Menu Favorites: " << endl;
        for (auto& favorite : menuFavorites) {
            cout << favorite.first << ": " << favorite.second << " times ordered" << endl;
        }
    }

    // Order Handling (Staff)
    void processOrder(string itemName, int quantity) {
        for (auto& item : menu) {
            if (item.name == itemName && item.isAvailable(quantity)) {
                item.reduceStock(quantity);
                recordSale(itemName, quantity);
                menuFavorites[itemName] += quantity;
                cout << "Order processed for " << quantity << " " << itemName << endl;
                return;
            }
        }
        cout << "Order could not be processed for " << itemName << endl;
    }

    // Inventory Update (Staff)
    void updateMenuItemStock(string itemName, int stock) {
        for (auto& item : menu) {
            if (item.name == itemName) {
                item.updateStock(stock);
                cout << "Stock for " << itemName << " updated to: " << stock << endl;
                return;
            }
        }
    }

    void addMenuItem(string name, double price, int stock) {
        menu.push_back(MenuItem(name, price, stock));
    }

    void displayMenu() {
        cout << "Menu: " << endl;
        for (auto& item : menu) {
            cout << item.name << ": Price = " << item.price << ", Stock = " << item.stock << endl;
        }
    }
};

int main() {
    SchoolFoodService sfsms;

    // Owner adds menu items
    sfsms.addMenuItem("Batagor Ikan", 10000.0, 50);
    sfsms.addMenuItem("Batagor ayam", 12000.0, 30);
    sfsms.addMenuItem("Otak-otak", 5000.0, 100);
    sfsms.addMenuItem("Siomay", 10000.0, 70);

    // Display the menu
    sfsms.displayMenu();

    // Owner sets break time
    sfsms.setBreakTime("12:30 PM");

    // Staff processes an order
    sfsms.processOrder("Batagor Ikan", 3);
    sfsms.processOrder("Otak-Otak", 5);

    // Staff updates the menu stock
    sfsms.updateMenuItemStock("Batagor Ayam", 40);

    // Owner sees the total sales and favorite menu items
    sfsms.displaySales();
    sfsms.displayFavoriteMenu();

    // Owner updates the price of an item
    sfsms.setMenuPrice("Siomay", 10000.0);

    // Display updated menu
    sfsms.displayMenu();

    return 0;
}
